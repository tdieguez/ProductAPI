// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyStore.OpenApi.Data;

namespace MyStore.OpenApi.Data.Migrations
{
    [DbContext(typeof(MyStoreDbContext))]
    partial class MyStoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MyStore.OpenApi.Entities.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTimeOffset>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Category = "Food",
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 11, 17, 19, 50, 52, 886, DateTimeKind.Unspecified).AddTicks(974), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Brazilian seafood stew. It is slowly cooked in a terracotta cassole. Moqueca can be made with shrimp or fish as a base with tomatoes, onions, garlic, lime and coriander.",
                            ModifiedAt = new DateTimeOffset(new DateTime(2020, 11, 17, 19, 50, 52, 890, DateTimeKind.Unspecified).AddTicks(7608), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Moqueca Capixaba",
                            Price = 99.989999999999995
                        },
                        new
                        {
                            Id = 2L,
                            Category = "Food",
                            CreatedAt = new DateTimeOffset(new DateTime(2020, 11, 17, 19, 50, 52, 890, DateTimeKind.Unspecified).AddTicks(7978), new TimeSpan(0, 1, 0, 0, 0)),
                            Description = "Traditional and complex Brazilian dish originated from Espirito Santo. This seafood pie is made with a massive list of ingredients: fish such as sea bass, hake, and grouper, mussels, siri crabmeat, oysters, salt cod, shrimp, olive oil, garlic, onions, tomatoes, green onions, cilantro, red bell peppers, annatto oil, coconut milk, cloves, cinnamon, white vinegar, palm hearts, olives, and eggs.",
                            ModifiedAt = new DateTimeOffset(new DateTime(2020, 11, 17, 19, 50, 52, 890, DateTimeKind.Unspecified).AddTicks(7994), new TimeSpan(0, 1, 0, 0, 0)),
                            Name = "Torta Capixaba",
                            Price = 99.989999999999995
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
